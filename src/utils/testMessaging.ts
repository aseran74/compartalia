// Script de diagn√≥stico para el sistema de mensajer√≠a
import { supabaseClean } from '@/config/supabaseClean';

export async function testMessagingSystem() {
  console.log('üîç === DIAGN√ìSTICO DEL SISTEMA DE MENSAJER√çA ===');
  
  // 1. Verificar conexi√≥n a Supabase
  console.log('\n1Ô∏è‚É£ Verificando conexi√≥n a Supabase...');
  try {
    const { data, error } = await supabaseClean
      .from('profiles')
      .select('count')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Error de conexi√≥n:', error);
      return { success: false, error: 'Error de conexi√≥n a Supabase' };
    }
    console.log('‚úÖ Conexi√≥n exitosa a Supabase');
  } catch (err) {
    console.error('‚ùå Error fatal de conexi√≥n:', err);
    return { success: false, error: 'Error fatal de conexi√≥n' };
  }

  // 2. Verificar permisos de lectura en tabla profiles
  console.log('\n2Ô∏è‚É£ Verificando permisos de lectura en tabla profiles...');
  try {
    const { data, error } = await supabaseClean
      .from('profiles')
      .select('id, name, email, role')
      .limit(5);
    
    if (error) {
      console.error('‚ùå Error de permisos en profiles:', error);
      console.error('C√≥digo de error:', error.code);
      console.error('Mensaje:', error.message);
      return { success: false, error: `Error de permisos en profiles: ${error.message}` };
    }
    console.log('‚úÖ Permisos de lectura en profiles OK');
    console.log(`   Usuarios encontrados: ${data?.length || 0}`);
  } catch (err) {
    console.error('‚ùå Error en profiles:', err);
    return { success: false, error: 'Error al leer profiles' };
  }

  // 3. Verificar permisos en tabla conversations
  console.log('\n3Ô∏è‚É£ Verificando permisos en tabla conversations...');
  try {
    const { data, error } = await supabaseClean
      .from('conversations')
      .select('id, user1_id, user2_id, created_at')
      .limit(5);
    
    if (error) {
      console.error('‚ùå Error de permisos en conversations:', error);
      console.error('C√≥digo de error:', error.code);
      console.error('Mensaje:', error.message);
      return { success: false, error: `Error de permisos en conversations: ${error.message}` };
    }
    console.log('‚úÖ Permisos de lectura en conversations OK');
    console.log(`   Conversaciones encontradas: ${data?.length || 0}`);
  } catch (err) {
    console.error('‚ùå Error en conversations:', err);
    return { success: false, error: 'Error al leer conversations' };
  }

  // 4. Verificar permisos en tabla messages
  console.log('\n4Ô∏è‚É£ Verificando permisos en tabla messages...');
  try {
    const { data, error } = await supabaseClean
      .from('messages')
      .select('id, conversation_id, sender_id, content, created_at')
      .limit(5);
    
    if (error) {
      console.error('‚ùå Error de permisos en messages:', error);
      console.error('C√≥digo de error:', error.code);
      console.error('Mensaje:', error.message);
      return { success: false, error: `Error de permisos en messages: ${error.message}` };
    }
    console.log('‚úÖ Permisos de lectura en messages OK');
    console.log(`   Mensajes encontrados: ${data?.length || 0}`);
  } catch (err) {
    console.error('‚ùå Error en messages:', err);
    return { success: false, error: 'Error al leer messages' };
  }

  // 5. Verificar autenticaci√≥n actual
  console.log('\n5Ô∏è‚É£ Verificando autenticaci√≥n actual...');
  try {
    const { data: { user }, error } = await supabaseClean.auth.getUser();
    
    if (error) {
      console.error('‚ùå Error obteniendo usuario:', error);
      return { success: false, error: 'Error de autenticaci√≥n' };
    }
    
    if (!user) {
      console.log('‚ö†Ô∏è No hay usuario autenticado');
      return { success: false, error: 'No hay usuario autenticado' };
    }
    
    console.log('‚úÖ Usuario autenticado:');
    console.log(`   ID: ${user.id}`);
    console.log(`   Email: ${user.email}`);
  } catch (err) {
    console.error('‚ùå Error verificando autenticaci√≥n:', err);
    return { success: false, error: 'Error verificando autenticaci√≥n' };
  }

  // 6. Probar inserci√≥n de mensaje (sin commit)
  console.log('\n6Ô∏è‚É£ Probando permisos de escritura en messages...');
  try {
    const { data: { user } } = await supabaseClean.auth.getUser();
    
    if (!user) {
      console.log('‚ö†Ô∏è No se puede probar escritura sin usuario autenticado');
      return { success: true, warning: 'No se pudo probar escritura (sin usuario)' };
    }

    // Buscar una conversaci√≥n existente del usuario
    const { data: conversations } = await supabaseClean
      .from('conversations')
      .select('id')
      .or(`user1_id.eq.${user.id},user2_id.eq.${user.id}`)
      .limit(1);

    if (!conversations || conversations.length === 0) {
      console.log('‚ö†Ô∏è No hay conversaciones para probar escritura');
      return { success: true, warning: 'No hay conversaciones para probar' };
    }

    const testConversationId = conversations[0].id;
    
    // Intentar insertar un mensaje de prueba
    const { data, error } = await supabaseClean
      .from('messages')
      .insert({
        conversation_id: testConversationId,
        sender_id: user.id,
        content: '[TEST] Mensaje de prueba - puede ser eliminado'
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå Error de permisos de escritura en messages:', error);
      console.error('C√≥digo de error:', error.code);
      console.error('Mensaje:', error.message);
      return { success: false, error: `Error de permisos de escritura: ${error.message}` };
    }

    console.log('‚úÖ Permisos de escritura en messages OK');
    console.log(`   Mensaje de prueba creado con ID: ${data.id}`);

    // Eliminar el mensaje de prueba
    await supabaseClean
      .from('messages')
      .delete()
      .eq('id', data.id);
    
    console.log('‚úÖ Mensaje de prueba eliminado');
  } catch (err) {
    console.error('‚ùå Error probando escritura:', err);
    return { success: false, error: 'Error probando escritura' };
  }

  console.log('\n‚úÖ === DIAGN√ìSTICO COMPLETADO EXITOSAMENTE ===\n');
  return { success: true };
}

// Funci√≥n para probar el env√≠o de un mensaje real
export async function testSendMessage(conversationId: string, content: string) {
  console.log('üì§ Probando env√≠o de mensaje...');
  console.log(`   Conversaci√≥n: ${conversationId}`);
  console.log(`   Contenido: ${content}`);

  try {
    const { data: { user }, error: authError } = await supabaseClean.auth.getUser();
    
    if (authError || !user) {
      console.error('‚ùå Usuario no autenticado');
      return { success: false, error: 'Usuario no autenticado' };
    }

    console.log(`   Usuario: ${user.email} (${user.id})`);

    const { data, error } = await supabaseClean
      .from('messages')
      .insert({
        conversation_id: conversationId,
        sender_id: user.id,
        content: content.trim()
      })
      .select(`
        id,
        conversation_id,
        sender_id,
        content,
        read_at,
        created_at
      `)
      .single();

    if (error) {
      console.error('‚ùå Error enviando mensaje:', error);
      console.error('C√≥digo:', error.code);
      console.error('Mensaje:', error.message);
      console.error('Detalles:', error.details);
      return { success: false, error: error.message };
    }

    console.log('‚úÖ Mensaje enviado exitosamente');
    console.log('   Datos:', data);

    // Actualizar timestamp de la conversaci√≥n
    await supabaseClean
      .from('conversations')
      .update({ updated_at: new Date().toISOString() })
      .eq('id', conversationId);

    return { success: true, data };
  } catch (err) {
    console.error('‚ùå Error fatal:', err);
    return { success: false, error: 'Error fatal' };
  }
}

// Funci√≥n para verificar RLS (Row Level Security)
export async function checkRLSPolicies() {
  console.log('üîí === VERIFICANDO POL√çTICAS RLS ===\n');

  const { data: { user } } = await supabaseClean.auth.getUser();
  
  if (!user) {
    console.log('‚ö†Ô∏è No hay usuario autenticado para verificar RLS');
    return;
  }

  console.log(`Usuario actual: ${user.email} (${user.id})\n`);

  // Verificar si puede leer sus propias conversaciones
  console.log('1Ô∏è‚É£ Verificando lectura de conversaciones propias...');
  const { data: myConversations, error: convError } = await supabaseClean
    .from('conversations')
    .select('*')
    .or(`user1_id.eq.${user.id},user2_id.eq.${user.id}`);

  if (convError) {
    console.error('‚ùå Error:', convError.message);
  } else {
    console.log(`‚úÖ Puede leer ${myConversations?.length || 0} conversaciones`);
  }

  // Verificar si puede leer mensajes de sus conversaciones
  if (myConversations && myConversations.length > 0) {
    console.log('\n2Ô∏è‚É£ Verificando lectura de mensajes...');
    const { data: messages, error: msgError } = await supabaseClean
      .from('messages')
      .select('*')
      .eq('conversation_id', myConversations[0].id);

    if (msgError) {
      console.error('‚ùå Error:', msgError.message);
    } else {
      console.log(`‚úÖ Puede leer ${messages?.length || 0} mensajes`);
    }
  }

  console.log('\n‚úÖ === VERIFICACI√ìN RLS COMPLETADA ===\n');
}

