<template>
  <div class="flex h-screen overflow-hidden">
    <!-- Sidebar -->
    <AppSidebar />
    
    <!-- Main Content -->
    <div class="flex flex-1 flex-col overflow-hidden" :class="{ 'ml-0 lg:ml-[90px]': !isExpanded, 'ml-0 lg:ml-[280px]': isExpanded }">
      <!-- Header -->
      <AppHeader />
      
      <!-- Page Content -->
      <main class="flex-1 overflow-x-hidden overflow-y-auto bg-gray-50 p-4 sm:p-6 xl:p-7.5 dark:bg-boxdark">
        <!-- Header -->
        <div class="mb-6">
          <div class="flex items-center justify-between">
            <div>
              <h1 class="text-2xl font-bold text-black dark:text-white">
                üó∫Ô∏è B√∫squeda por Mapa
              </h1>
              <p class="text-sm font-medium text-body-color">
                Encuentra viajes usando el mapa interactivo
              </p>
            </div>
            <button
              @click="$router.go(-1)"
              class="flex items-center space-x-2 rounded-md border border-stroke px-4 py-2 text-sm font-medium text-body-color hover:bg-gray-50 dark:border-strokedark dark:hover:bg-gray-800"
            >
              <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
              </svg>
              <span>Volver</span>
            </button>
          </div>
        </div>

        <!-- Layout responsivo -->
        <div class="grid grid-cols-1 gap-6 lg:grid-cols-4">
          <!-- En m√≥vil: Mapa de pantalla completa -->
          <div class="lg:hidden">
            <!-- Header del mapa m√≥vil -->
            <div class="mb-4 bg-white dark:bg-boxdark shadow-sm p-4 rounded-lg">
              <div class="flex items-center justify-between">
                <h1 class="text-lg font-bold text-black dark:text-white">
                  üó∫Ô∏è B√∫squeda por Mapa
                </h1>
                <button
                  @click="$router.go(-1)"
                  class="text-gray-400 hover:text-gray-600 transition-colors"
                >
                  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              </div>
            </div>
            
            <!-- Mapa m√≥vil -->
            <div class="bg-white dark:bg-boxdark rounded-lg shadow-lg overflow-hidden">
              <div 
                id="map-mobile" 
                class="w-full"
                style="height: 70vh; min-height: 400px;"
              ></div>
            </div>
            
            <!-- Bot√≥n flotante para filtros en m√≥vil -->
            <div class="fixed bottom-4 right-4 z-30">
              <button
                @click="showFiltersMobile = !showFiltersMobile"
                class="bg-blue-600 hover:bg-blue-700 text-white p-3 rounded-full shadow-lg transition-colors"
              >
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                </svg>
              </button>
            </div>
            
            <!-- Panel de filtros m√≥vil -->
            <div v-if="showFiltersMobile" class="fixed inset-0 bg-black bg-opacity-50 z-50 lg:hidden">
              <div class="absolute bottom-0 left-0 right-0 bg-white dark:bg-boxdark rounded-t-lg shadow-lg max-h-[80vh] overflow-y-auto">
                <div class="p-4 border-b border-gray-200 dark:border-gray-700">
                  <div class="flex items-center justify-between">
                    <h3 class="text-lg font-semibold text-black dark:text-white">
                      üîç Filtros de B√∫squeda
                    </h3>
                    <button
                      @click="showFiltersMobile = false"
                      class="text-gray-400 hover:text-gray-600 transition-colors"
                    >
                      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                      </svg>
                    </button>
                  </div>
                </div>
                
                <div class="p-4">
                  <!-- Aqu√≠ va el contenido de los filtros -->
                  <div class="space-y-4">
                    <div>
                      <label class="block text-sm font-medium text-black dark:text-white mb-2">
                        üöó Origen
                      </label>
                      <input
                        v-model="searchForm.origin"
                        type="text"
                        placeholder="Escribe tu origen..."
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-800 dark:border-gray-600 dark:text-white"
                      />
                    </div>
                    
                    <div>
                      <label class="block text-sm font-medium text-black dark:text-white mb-2">
                        üéØ Destino
                      </label>
                      <input
                        v-model="searchForm.destination"
                        type="text"
                        placeholder="Escribe tu destino..."
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-800 dark:border-gray-600 dark:text-white"
                      />
                    </div>
                    
                    <div>
                      <label class="block text-sm font-medium text-black dark:text-white mb-2">
                        üìÖ Fecha
                      </label>
                      <input
                        v-model="searchForm.date"
                        type="date"
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-800 dark:border-gray-600 dark:text-white"
                      />
                    </div>
                    
                    <button
                      @click="searchTrips"
                      class="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors"
                    >
                      üîç Buscar Viajes
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <!-- Panel de B√∫squeda - Solo visible en escritorio -->
          <div class="hidden lg:block lg:col-span-1">
            <div class="rounded-sm border border-stroke bg-white p-6 shadow-default dark:border-strokedark dark:bg-boxdark">
              <h3 class="mb-4 text-lg font-semibold text-black dark:text-white">
                üîç Filtros de B√∫squeda
              </h3>
              
              <form @submit.prevent="searchTrips" class="space-y-4">
                <!-- Secci√≥n de Origen -->
                <div class="rounded-sm border border-stroke bg-gray-50 p-4 dark:border-strokedark dark:bg-gray-800">
                  <h4 class="mb-3 text-md font-semibold text-black dark:text-white">
                    üöó ¬øDesde d√≥nde viajas?
                  </h4>
                  
                  <!-- B√∫squeda por direcci√≥n exacta -->
                  <div class="mb-3">
                    <label class="mb-2 block text-sm font-medium text-black dark:text-white">
                      Escribe una direcci√≥n exacta:
                    </label>
                    <AutocompleteInput
                      v-model="searchForm.origin"
                      placeholder="üìç Ej: Calle Gran V√≠a, 1, Madrid"
                      :suggestions="originSuggestions"
                      :is-loading="isLoadingOrigin"
                      @input="handleOriginInput"
                      @select="handleOriginSelect"
                      input-class="w-full rounded border-[1.5px] border-stroke bg-transparent px-3 py-2 text-sm font-medium outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-whiter dark:border-form-strokedark dark:bg-form-input dark:focus:border-primary"
                    />
                  </div>

                  <!-- Or√≠genes predefinidos -->
                  <div>
                    <label class="mb-2 block text-sm font-medium text-black dark:text-white">
                      O selecciona una ciudad del extrarradio:
                    </label>
                    <div class="grid grid-cols-2 gap-2 sm:gap-3">
                      <button
                        v-for="city in madridCities"
                        :key="city"
                        @click="selectOriginFromList(city)"
                        :class="[
                          'rounded-lg border px-2 py-1.5 text-center text-xs font-medium transition-all duration-200',
                          searchForm.origin === city
                            ? 'border-primary bg-primary text-white'
                            : 'border-stroke bg-white text-body-color hover:border-primary hover:bg-primary/5 dark:border-strokedark dark:bg-boxdark dark:text-white'
                        ]"
                      >
                        {{ city }}
                      </button>
                    </div>
                  </div>
                </div>

                <!-- Secci√≥n de Destino -->
                <div class="rounded-sm border border-stroke bg-gray-50 p-4 dark:border-strokedark dark:bg-gray-800">
                  <h4 class="mb-3 text-md font-semibold text-black dark:text-white">
                    üéØ ¬øA d√≥nde vas?
                  </h4>
                  
                  <!-- B√∫squeda por direcci√≥n exacta -->
                  <div class="mb-3">
                    <label class="mb-2 block text-sm font-medium text-black dark:text-white">
                      Escribe una direcci√≥n exacta:
                    </label>
                    <AutocompleteInput
                      v-model="searchForm.destination"
                      placeholder="üìç Ej: Plaza Mayor, Madrid"
                      :suggestions="destinationSuggestions"
                      :is-loading="isLoadingDestination"
                      @input="handleDestinationInput"
                      @select="handleDestinationSelect"
                      input-class="w-full rounded border-[1.5px] border-stroke bg-transparent px-3 py-2 text-sm font-medium outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-whiter dark:border-form-strokedark dark:bg-form-input dark:focus:border-primary"
                    />
                  </div>

                  <!-- Destinos predefinidos -->
                  <div>
                    <label class="mb-2 block text-sm font-medium text-black dark:text-white">
                      O selecciona un destino popular:
                    </label>
                    <div class="grid grid-cols-2 gap-2 sm:gap-3">
                      <button
                        v-for="destination in madridDestinations"
                        :key="destination"
                        @click="selectDestinationFromList(destination)"
                        :class="[
                          'rounded-lg border px-2 py-1.5 text-center text-xs font-medium transition-all duration-200',
                          searchForm.destination === destination
                            ? 'border-primary bg-primary text-white'
                            : 'border-stroke bg-white text-body-color hover:border-primary hover:bg-primary/5 dark:border-strokedark dark:bg-boxdark dark:text-white'
                        ]"
                      >
                        {{ destination }}
                      </button>
                    </div>
                  </div>
                </div>

                <!-- Fecha y Hora -->
                <div class="rounded-sm border border-stroke bg-gray-50 p-4 dark:border-strokedark dark:bg-gray-800">
                  <h4 class="mb-3 text-md font-semibold text-black dark:text-white">
                    üìÖ ¬øCu√°ndo viajas?
                  </h4>
                  
                  <div class="grid grid-cols-1 gap-3">
                    <div>
                      <label class="mb-2 block text-sm font-medium text-black dark:text-white">
                        Fecha *
                      </label>
                      <input
                        v-model="searchForm.date"
                        type="date"
                        :min="today"
                        class="w-full rounded border-[1.5px] border-stroke bg-transparent px-3 py-2 text-sm font-medium outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-whiter dark:border-form-strokedark dark:bg-form-input dark:focus:border-primary"
                      />
                    </div>
                    
                    <div>
                      <label class="mb-2 block text-sm font-medium text-black dark:text-white">
                        Hora aproximada
                      </label>
                      <input
                        v-model="searchForm.time"
                        type="time"
                        class="w-full rounded border-[1.5px] border-stroke bg-transparent px-3 py-2 text-sm font-medium outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-whiter dark:border-form-strokedark dark:bg-form-input dark:focus:border-primary"
                      />
                    </div>
                  </div>
                </div>

                <!-- Filtros -->
                <div class="rounded-sm border border-stroke bg-gray-50 p-4 dark:border-strokedark dark:bg-gray-800">
                  <h4 class="mb-3 text-md font-semibold text-black dark:text-white">
                    üîç Filtros
                  </h4>
                  
                  <div class="space-y-3">
                    <div>
                      <label class="mb-2 block text-sm font-medium text-black dark:text-white">
                        Tipo de viaje
                      </label>
                      <select
                        v-model="searchForm.tripType"
                        class="w-full rounded border-[1.5px] border-stroke bg-transparent px-3 py-2 text-sm font-medium outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-whiter dark:border-form-strokedark dark:bg-form-input dark:focus:border-primary"
                      >
                        <option value="">Todos los tipos</option>
                        <option value="diario">Diario</option>
                        <option value="semanal">Semanal</option>
                        <option value="mensual">Mensual</option>
                      </select>
                    </div>
                    
                    <div>
                      <label class="mb-2 block text-sm font-medium text-black dark:text-white">
                        Precio m√°ximo
                      </label>
                      <input
                        v-model="searchForm.maxPrice"
                        type="number"
                        placeholder="‚Ç¨"
                        class="w-full rounded border-[1.5px] border-stroke bg-transparent px-3 py-2 text-sm font-medium outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-whiter dark:border-form-strokedark dark:bg-form-input dark:focus:border-primary"
                      />
                    </div>
                    
                    <div>
                      <label class="mb-2 block text-sm font-medium text-black dark:text-white">
                        Asientos
                      </label>
                      <input
                        v-model="searchForm.seats"
                        type="number"
                        min="1"
                        max="8"
                        placeholder="1"
                        class="w-full rounded border-[1.5px] border-stroke bg-transparent px-3 py-2 text-sm font-medium outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-whiter dark:border-form-strokedark dark:bg-form-input dark:focus:border-primary"
                      />
                    </div>
                  </div>
                </div>

                <!-- Bot√≥n de b√∫squeda -->
                <div class="flex justify-end">
                  <button
                    type="submit"
                    :disabled="isSearching"
                    class="flex items-center justify-center gap-2 rounded bg-primary px-4 py-2 text-sm font-medium text-white hover:bg-opacity-90 disabled:opacity-50"
                  >
                    <svg v-if="isSearching" class="h-4 w-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                    </svg>
                    <svg v-else class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                    </svg>
                    {{ isSearching ? 'Buscando...' : 'Buscar en Mapa' }}
                  </button>
                </div>
              </form>
            </div>
          </div>

          <!-- Mapa y Resultados - M√°s grande en escritorio -->
          <div class="lg:col-span-3">
            <div class="rounded-sm border border-stroke bg-white p-6 shadow-default dark:border-strokedark dark:bg-boxdark">
              <h3 class="mb-4 text-lg font-semibold text-black dark:text-white">
                üó∫Ô∏è Mapa Interactivo
              </h3>
              
              <!-- Mapa de Google Maps -->
              <div class="h-96 lg:h-[600px] rounded-lg overflow-hidden border border-stroke dark:border-strokedark">
                <div 
                  id="map" 
                  class="w-full h-full"
                  style="min-height: 384px;"
                ></div>
              </div>
              
              <!-- Resultados de b√∫squeda -->
              <div v-if="hasSearched" class="mt-6">
                <h4 class="mb-4 text-md font-semibold text-black dark:text-white">
                  üìç Resultados de B√∫squeda
                </h4>
                
                <div v-if="isSearching" class="text-center text-body-color">
                  <svg class="mx-auto h-8 w-8 animate-spin text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                  </svg>
                  <p class="mt-2">Buscando viajes...</p>
                </div>
                
                <div v-else-if="searchResults.length === 0" class="text-center text-body-color">
                  <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.29-1.009-5.824-2.709M15 6.291A7.962 7.962 0 0012 4c-2.34 0-4.29 1.009-5.824 2.709"/>
                  </svg>
                  <p class="mt-2">No se encontraron viajes</p>
                  <p class="text-sm">Intenta ajustar tus filtros</p>
                </div>
                
                <div v-else class="space-y-3">
                  <div
                    v-for="result in searchResults"
                    :key="result.trip.id"
                    class="rounded-lg border border-stroke p-3 hover:shadow-md transition-shadow dark:border-strokedark"
                  >
                    <div class="flex items-center justify-between mb-2">
                      <span class="text-xs font-medium text-primary">Diario</span>
                      <span class="text-sm font-bold text-black dark:text-white">{{ result.trip.price_per_seat }}‚Ç¨</span>
                    </div>
                    
                    <div class="space-y-1">
                      <div class="flex items-center text-xs text-body-color">
                        <svg class="h-3 w-3 mr-2 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                        </svg>
                        {{ result.trip.origin_name }}
                      </div>
                      <div class="flex items-center text-xs text-body-color">
                        <svg class="h-3 w-3 mr-2 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                        </svg>
                        {{ result.trip.destination_name }}
                      </div>
                    </div>
                    
                    <div class="mt-2 flex items-center justify-between">
                      <span class="text-xs text-body-color">{{ result.trip.departure_time }}</span>
                      <button class="text-xs text-primary hover:underline">
                        Ver en mapa
                      </button>
                    </div>
                    
                    <div v-if="result.trip.driver_id" class="mt-1 text-xs text-gray-500 dark:text-gray-400">
                      Conductor: {{ result.trip.driver_id }}
                    </div>
                    
                    <div v-if="result.trip.available_seats" class="mt-1 text-xs text-gray-500 dark:text-gray-400">
                      {{ result.trip.available_seats }} asientos disponibles
                    </div>
                  </div>
                </div>
              </div>
              
              <div v-else class="text-center text-body-color">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                </svg>
                <p class="mt-2">Realiza una b√∫squeda para ver resultados en el mapa</p>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, reactive, onMounted, nextTick } from 'vue'
import { useRouter } from 'vue-router'
import { SimpleHybridService, type SearchResult } from '@/services/simpleHybridService'
import AutocompleteInput from '@/components/AutocompleteInput.vue'
import { SimpleAutocompleteService, type AutocompleteSuggestion } from '@/services/simpleAutocompleteService'
import { GeolocationService } from '@/services/geolocation'
import { useSidebar } from '@/composables/useSidebar'
import AppSidebar from '@/components/layout/AppSidebar.vue'
import AppHeader from '@/components/layout/AppHeader.vue'

// Declaraciones de tipos para Google Maps
declare global {
  interface Window {
    google: any
    initGoogleMaps: () => void
  }
}

// Router y sidebar
const router = useRouter()
const { isExpanded, isMobileOpen } = useSidebar()

// Estado del formulario
const searchForm = reactive({
  origin: '',
  destination: '',
  date: '',
  time: '',
  tripType: '',
  maxPrice: '',
  seats: 1
})

// Estado de la b√∫squeda
const searchResults = ref<SearchResult[]>([])
const hasSearched = ref(false)
const isSearching = ref(false)

// Estado para panel de filtros en m√≥vil
const showFiltersMobile = ref(false)

// Autocompletado
const originSuggestions = ref<AutocompleteSuggestion[]>([])
const destinationSuggestions = ref<AutocompleteSuggestion[]>([])
const isLoadingOrigin = ref(false)
const isLoadingDestination = ref(false)

// Servicios
const hybridService = new SimpleHybridService()
const autocompleteService = new SimpleAutocompleteService()
const geolocationService = new GeolocationService()

// Fecha actual
const today = new Date().toISOString().split('T')[0]

// Or√≠genes y destinos predefinidos
const predefinedOrigins = [
  { name: 'Getafe', lat: 40.3082504, lng: -3.7323934 },
  { name: 'M√≥stoles', lat: 40.3223, lng: -3.8646 },
  { name: 'Alcorc√≥n', lat: 40.3458, lng: -3.8247 },
  { name: 'Legan√©s', lat: 40.3272, lng: -3.7635 },
  { name: 'Fuenlabrada', lat: 40.2842, lng: -3.7941 },
  { name: 'Alcal√° de Henares', lat: 40.4817, lng: -3.3643 },
  { name: 'Torrej√≥n de Ardoz', lat: 40.4564, lng: -3.4819 }
]

const predefinedDestinations = [
  { name: 'Chamart√≠n', lat: 40.4615174, lng: -3.6865844 },
  { name: 'Atocha', lat: 40.4075, lng: -3.6993 },
  { name: 'Nuevos Ministerios', lat: 40.4461, lng: -3.6903 },
  { name: 'Gran V√≠a', lat: 40.4192, lng: -3.7036 },
  { name: 'Plaza de Espa√±a', lat: 40.4236, lng: -3.7123 },
  { name: 'Plaza de Castilla', lat: 40.4669, lng: -3.6886 },
  { name: 'Moncloa', lat: 40.4355, lng: -3.7195 }
]

// Funciones de autocompletado
const handleOriginInput = async (value: string) => {
  if (value.length < 3) {
    originSuggestions.value = []
    return
  }
  
  isLoadingOrigin.value = true
  try {
    // Intentar usar Google Places API primero
    const googleResults = await geolocationService.autocompleteAddress(value)
    if (googleResults.length > 0) {
      originSuggestions.value = googleResults
      return
    }
  } catch (error) {
    console.warn('Google Places API fall√≥, usando fallback:', error)
  }
  
  // Fallback a autocompletado local
  try {
    const results = await autocompleteService.getSuggestions(value)
    originSuggestions.value = results
  } catch (error) {
    console.error('Error en autocompletado:', error)
    originSuggestions.value = []
  } finally {
    isLoadingOrigin.value = false
  }
}

const handleDestinationInput = async (value: string) => {
  if (value.length < 3) {
    destinationSuggestions.value = []
    return
  }
  
  isLoadingDestination.value = true
  try {
    // Intentar usar Google Places API primero
    const googleResults = await geolocationService.autocompleteAddress(value)
    if (googleResults.length > 0) {
      destinationSuggestions.value = googleResults
      return
    }
  } catch (error) {
    console.warn('Google Places API fall√≥, usando fallback:', error)
  }
  
  // Fallback a autocompletado local
  try {
    const results = await autocompleteService.getSuggestions(value)
    destinationSuggestions.value = results
  } catch (error) {
    console.error('Error en autocompletado:', error)
    destinationSuggestions.value = []
  } finally {
    isLoadingDestination.value = false
  }
}

const handleOriginSelect = (suggestion: AutocompleteSuggestion) => {
  searchForm.origin = suggestion.name
  originSuggestions.value = []
}

const handleDestinationSelect = (suggestion: AutocompleteSuggestion) => {
  searchForm.destination = suggestion.name
  destinationSuggestions.value = []
}

// Funciones de selecci√≥n predefinida
const selectPredefinedOrigin = (city: any) => {
  searchForm.origin = city.name
}

const selectPredefinedDestination = (destination: any) => {
  searchForm.destination = destination.name
}

// Funci√≥n de b√∫squeda
const searchTrips = async () => {
  if (!searchForm.origin || !searchForm.destination) {
    return
  }
  
  isSearching.value = true
  hasSearched.value = true
  
  try {
    const results = await hybridService.searchTrips(
      searchForm.origin,
      searchForm.destination,
      {
        useGeolocation: true,
        maxDistanceKm: 50,
        limit: 50,
        date: searchForm.date
      }
    )
    
    searchResults.value = results
    console.log('Resultados de b√∫squeda:', results)
  } catch (error) {
    console.error('Error en b√∫squeda:', error)
    searchResults.value = []
  } finally {
    isSearching.value = false
  }
}

// Inicializaci√≥n
onMounted(() => {
  searchForm.date = today
})
</script>
                  
                  <!-- B√∫squeda por direcci√≥n exacta -->
                  <div class="mb-3">
                    <label class="mb-2 block text-sm font-medium text-black dark:text-white">
                      Escribe una direcci√≥n exacta:
                    </label>
                    <AutocompleteInput
                      v-model="searchForm.destination"
                      placeholder="üìç Ej: Plaza Mayor, Madrid"
                      :suggestions="destinationSuggestions"
                      :is-loading="isLoadingDestination"
                      @input="handleDestinationInput"
                      @select="handleDestinationSelect"
                      input-class="w-full rounded border-[1.5px] border-stroke bg-transparent px-3 py-2 text-sm font-medium outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-whiter dark:border-form-strokedark dark:bg-form-input dark:focus:border-primary"
                    />
                  </div>

                  <!-- Destinos predefinidos -->
                  <div>
                    <label class="mb-2 block text-sm font-medium text-black dark:text-white">
                      O selecciona un destino en Madrid:
                    </label>
                    <div class="grid grid-cols-2 gap-2 sm:gap-3">
                      <button
                        v-for="destination in madridDestinations"
                        :key="destination"
                        @click="selectDestinationFromList(destination)"
                        :class="[
                          'rounded-lg border px-2 py-1.5 text-center text-xs font-medium transition-all duration-200',
                          searchForm.destination === destination
                            ? 'border-primary bg-primary text-white'
                            : 'border-stroke bg-white text-body-color hover:border-primary hover:bg-primary/5 dark:border-strokedark dark:bg-boxdark dark:text-white'
                        ]"
                      >
                        {{ destination }}
                      </button>
                    </div>
                  </div>
                </div>

                <!-- Fecha y Hora -->
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <label class="mb-2 block text-sm font-medium text-black dark:text-white">
                      üìÖ Fecha
                    </label>
                    <input
                      v-model="searchForm.date"
                      type="date"
                      :min="today"
                      class="w-full rounded border-[1.5px] border-stroke bg-transparent px-3 py-2 text-sm font-medium outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-whiter dark:border-form-strokedark dark:bg-form-input dark:focus:border-primary"
                    />
                  </div>
                  
                  <div>
                    <label class="mb-2 block text-sm font-medium text-black dark:text-white">
                      üïê Hora
                    </label>
                    <input
                      v-model="searchForm.time"
                      type="time"
                      class="w-full rounded border-[1.5px] border-stroke bg-transparent px-3 py-2 text-sm font-medium outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-whiter dark:border-form-strokedark dark:bg-form-input dark:focus:border-primary"
                    />
                  </div>
                </div>

                <!-- Bot√≥n de b√∫squeda -->
                <div class="flex space-x-2">
                  <button
                    type="submit"
                    :disabled="isSearching"
                    class="flex-1 bg-primary text-white px-4 py-2 rounded-lg hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed text-sm font-medium transition-colors"
                  >
                    <svg v-if="isSearching" class="h-4 w-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                    </svg>
                    <svg v-else class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                    </svg>
                    {{ isSearching ? 'Buscando...' : 'Buscar en Mapa' }}
                  </button>
                  
                  <button
                    type="button"
                    @click="showFiltersMobile = false"
                    class="px-4 py-2 border border-stroke text-body-color rounded-lg hover:bg-gray-50 dark:border-strokedark dark:hover:bg-gray-800 text-sm font-medium transition-colors"
                  >
                    Cerrar
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>

        <!-- Bot√≥n Flotante para Abrir Filtros en M√≥vil -->
        <button
          @click="showFiltersMobile = true"
          class="fixed bottom-4 right-4 z-40 lg:hidden bg-primary text-white p-4 rounded-full shadow-lg hover:bg-primary/90 transition-colors"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"/>
          </svg>
        </button>
      </main>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, reactive, onMounted, nextTick } from 'vue'
import { useRouter } from 'vue-router'
import { SimpleHybridService, type SearchResult } from '@/services/simpleHybridService'
import AutocompleteInput from '@/components/AutocompleteInput.vue'
import { SimpleAutocompleteService, type AutocompleteSuggestion } from '@/services/simpleAutocompleteService'
import { GeolocationService } from '@/services/geolocation'
import { useSidebar } from '@/composables/useSidebar'
import AppSidebar from '@/components/layout/AppSidebar.vue'
import AppHeader from '@/components/layout/AppHeader.vue'

// Declaraciones de tipos para Google Maps
declare global {
  interface Window {
    google: any;
  }
}

// Router y sidebar
const router = useRouter()
const { isExpanded } = useSidebar()

// Servicios
const hybridService = new SimpleHybridService()
const autocompleteService = new SimpleAutocompleteService()
const geolocationService = new GeolocationService()

// Formulario de b√∫squeda
const searchForm = reactive({
  origin: '',
  destination: '',
  date: '',
  time: '',
  tripType: '',
  maxPrice: '',
  seats: '1'
})

// Estados de la b√∫squeda
const searchResults = ref<SearchResult[]>([])
const isSearching = ref(false)
const hasSearched = ref(false)

// Estado para panel de filtros en m√≥vil
const showFiltersMobile = ref(false)

// Autocompletado
const originSuggestions = ref<AutocompleteSuggestion[]>([])
const destinationSuggestions = ref<AutocompleteSuggestion[]>([])
const isLoadingOrigin = ref(false)
const isLoadingDestination = ref(false)

// Mapa
const map = ref<any>(null)
const markers = ref<any[]>([])
const directionsService = ref<any>(null)
const directionsRenderer = ref<any>(null)

// Fecha actual
const today = new Date().toISOString().split('T')[0]

// Ciudades del extrarradio de Madrid
const madridCities = [
  'M√≥stoles',
  'Alcal√° de Henares',
  'Fuenlabrada',
  'Legan√©s',
  'Getafe',
  'Alcorc√≥n',
  'Torrej√≥n de Ardoz',
  'Parla',
  'Alcobendas',
  'San Sebasti√°n de los Reyes',
  'Coslada',
  'Rivas-Vaciamadrid',
  'Valdemoro',
  'Pozuelo de Alarc√≥n',
  'Majadahonda',
  'Las Rozas de Madrid',
  'Boadilla del Monte',
  'Villaviciosa de Od√≥n',
  'Moralzarzal',
  'Colmenar Viejo'
]

// Destinos populares de Madrid
const madridDestinations = [
  'Puerta del Sol',
  'Gran V√≠a',
  'Chamart√≠n',
  'Atocha',
  'Nuevos Ministerios',
  'Plaza de Castilla',
  'Moncloa',
  'Plaza de Espa√±a',
  'AZCA',
  'Cuatro Torres',
  'Universidad Complutense',
  'Hospital La Paz',
  'Madrid Centro',
  'Ciudad financiera Santander (Boadilla)',
  'Ciudad financiera BBVA (Las Tablas)'
]

// Funciones de autocompletado
const handleOriginInput = async (value: string) => {
  if (value.length >= 2) {
    try {
      // Intentar usar Google Places API primero
      const googleResults = await geolocationService.autocompleteAddress(value)
      if (googleResults.length > 0) {
        originSuggestions.value = googleResults
        return
      }
    } catch (error) {
      console.warn('Google Places API fall√≥, usando fallback:', error)
    }
    
    // Fallback a servicio simple
    originSuggestions.value = autocompleteService.searchSuggestions(value, 8)
  } else {
    originSuggestions.value = []
  }
}

const handleDestinationInput = async (value: string) => {
  if (value.length >= 2) {
    try {
      // Intentar usar Google Places API primero
      const googleResults = await geolocationService.autocompleteAddress(value)
      if (googleResults.length > 0) {
        destinationSuggestions.value = googleResults
        return
      }
    } catch (error) {
      console.warn('Google Places API fall√≥, usando fallback:', error)
    }
    
    // Fallback a servicio simple
    destinationSuggestions.value = autocompleteService.searchSuggestions(value, 8)
  } else {
    destinationSuggestions.value = []
  }
}

const handleOriginSelect = (suggestion: AutocompleteSuggestion) => {
  searchForm.origin = suggestion.name
  originSuggestions.value = []
  console.log('Origen seleccionado:', suggestion)
}

const handleDestinationSelect = (suggestion: AutocompleteSuggestion) => {
  searchForm.destination = suggestion.name
  destinationSuggestions.value = []
  console.log('Destino seleccionado:', suggestion)
}

// Selecci√≥n desde listas predefinidas
const selectOriginFromList = (city: string) => {
  searchForm.origin = city
  originSuggestions.value = []
}

const selectDestinationFromList = (destination: string) => {
  searchForm.destination = destination
  destinationSuggestions.value = []
}

// Inicializar mapa
const initMap = () => {
  if (typeof window.google === 'undefined' || !window.google.maps) {
    console.error('Google Maps no est√° cargado')
    return
  }

  const mapElement = document.getElementById('map')
  if (!mapElement) {
    console.error('Elemento del mapa no encontrado')
    return
  }

  // Centro en Madrid
  const madrid = { lat: 40.4168, lng: -3.7038 }
  
  map.value = new window.google.maps.Map(mapElement, {
    zoom: 10,
    center: madrid,
    mapTypeId: window.google.maps.MapTypeId.ROADMAP,
    styles: [
      {
        featureType: 'poi',
        elementType: 'labels',
        stylers: [{ visibility: 'off' }]
      }
    ]
  })

  directionsService.value = new window.google.maps.DirectionsService()
  directionsRenderer.value = new window.google.maps.DirectionsRenderer({
    draggable: false,
    suppressMarkers: true
  })
  
  directionsRenderer.value.setMap(map.value)
  
  console.log('‚úÖ Mapa inicializado correctamente')
}

// Limpiar marcadores
const clearMarkers = () => {
  markers.value.forEach((marker: any) => marker.setMap(null))
  markers.value = []
}

// A√±adir marcador (usando AdvancedMarkerElement si est√° disponible)
const addMarker = (position: { lat: number; lng: number }, title: string, color: string = '#3B82F6') => {
  if (!map.value) return

  // Intentar usar AdvancedMarkerElement si est√° disponible
  if (window.google.maps.marker && window.google.maps.marker.AdvancedMarkerElement) {
    const marker = new window.google.maps.marker.AdvancedMarkerElement({
      position,
      map: map.value,
      title,
      content: createMarkerContent(color)
    })
    
    markers.value.push(marker)
    return marker
  } else {
    // Fallback a Marker tradicional
    const marker = new window.google.maps.Marker({
      position,
      map: map.value,
      title,
      icon: {
        path: window.google.maps.SymbolPath.CIRCLE,
        scale: 8,
        fillColor: color,
        fillOpacity: 1,
        strokeColor: '#ffffff',
        strokeWeight: 2
      }
    })

    markers.value.push(marker)
    return marker
  }
}

// Crear contenido HTML para AdvancedMarkerElement
const createMarkerContent = (color: string) => {
  const div = document.createElement('div')
  div.style.width = '16px'
  div.style.height = '16px'
  div.style.borderRadius = '50%'
  div.style.backgroundColor = color
  div.style.border = '2px solid #ffffff'
  div.style.boxShadow = '0 2px 4px rgba(0,0,0,0.3)'
  return div
}

// Mostrar ruta en el mapa
const showRoute = (origin: { lat: number; lng: number }, destination: { lat: number; lng: number }) => {
  if (!directionsService.value || !directionsRenderer.value) return

  directionsService.value.route({
    origin,
    destination,
    travelMode: window.google.maps.TravelMode.DRIVING
  }, (result: any, status: any) => {
    if (status === 'OK' && result) {
      directionsRenderer.value?.setDirections(result)
    } else {
      console.error('Error al calcular la ruta:', status)
    }
  })
}

// Actualizar mapa con resultados
const updateMapWithResults = () => {
  if (!map.value || searchResults.value.length === 0) return

  clearMarkers()
  
  // A√±adir marcador de origen
  if (searchForm.origin) {
    // Usar coordenadas del primer resultado como ejemplo
    const firstResult = searchResults.value[0]
    if (firstResult) {
      addMarker(
        { lat: firstResult.trip.origin_lat, lng: firstResult.trip.origin_lng },
        `Origen: ${firstResult.trip.origin_name}`,
        '#10B981'
      )
    }
  }

  // A√±adir marcador de destino
  if (searchForm.destination) {
    const firstResult = searchResults.value[0]
    if (firstResult) {
      addMarker(
        { lat: firstResult.trip.destination_lat, lng: firstResult.trip.destination_lng },
        `Destino: ${firstResult.trip.destination_name}`,
        '#EF4444'
      )
    }
  }

  // A√±adir marcadores para todos los viajes
  searchResults.value.forEach((result, index) => {
    const color = index === 0 ? '#3B82F6' : '#6B7280'
    addMarker(
      { lat: result.trip.origin_lat, lng: result.trip.origin_lng },
      `${result.trip.origin_name} ‚Üí ${result.trip.destination_name} (${result.trip.price_per_seat}‚Ç¨)`,
      color
    )
  })

  // Mostrar ruta si hay origen y destino
  if (searchForm.origin && searchForm.destination && searchResults.value.length > 0) {
    const firstResult = searchResults.value[0]
    showRoute(
      { lat: firstResult.trip.origin_lat, lng: firstResult.trip.origin_lng },
      { lat: firstResult.trip.destination_lat, lng: firstResult.trip.destination_lng }
    )
  }
}

// B√∫squeda de viajes
const searchTrips = async () => {
  if (!searchForm.origin || !searchForm.destination) {
    console.log('‚ö†Ô∏è Por favor, completa el origen y destino')
    return
  }

  isSearching.value = true
  hasSearched.value = true

  try {
    console.log('üîç Iniciando b√∫squeda h√≠brida en mapa...', searchForm)
    
    const results = await hybridService.searchTrips(
      searchForm.origin,
      searchForm.destination,
      {
        useGeolocation: true,
        maxDistanceKm: 50,
        limit: 20
      }
    )

    console.log('‚úÖ B√∫squeda completada:', results)
    searchResults.value = results
    
    // Actualizar mapa con los resultados
    updateMapWithResults()
  } catch (error) {
    console.error('‚ùå Error en la b√∫squeda:', error)
    searchResults.value = []
  } finally {
    isSearching.value = false
  }
}

// Inicializar mapa cuando el componente se monte
onMounted(async () => {
  // Esperar a que Google Maps est√© disponible
  const checkGoogleMaps = () => {
    if (typeof window.google !== 'undefined' && window.google.maps) {
      nextTick(() => {
        initMap()
      })
    } else {
      setTimeout(checkGoogleMaps, 100)
    }
  }
  
  checkGoogleMaps()
})
</script>
