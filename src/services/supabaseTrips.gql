-- Estructura de base de datos para viajes en Supabase

-- Tabla de viajes
CREATE TABLE trips (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  origin_name TEXT NOT NULL,
  origin_lat DECIMAL(10, 8) NOT NULL,
  origin_lng DECIMAL(11, 8) NOT NULL,
  destination_name TEXT NOT NULL,
  destination_lat DECIMAL(10, 8) NOT NULL,
  destination_lng DECIMAL(11, 8) NOT NULL,
  route_distance DECIMAL(8, 2),
  route_duration INTEGER,
  route_coordinates JSONB,
  driver_id UUID REFERENCES auth.users(id),
  driver_name TEXT NOT NULL,
  driver_rating DECIMAL(2, 1),
  available_seats INTEGER NOT NULL DEFAULT 1,
  departure_time TIME NOT NULL,
  price DECIMAL(5, 2) NOT NULL,
  days_of_week INTEGER[] NOT NULL DEFAULT '{1,2,3,4,5}', -- 1=Lunes, 7=Domingo
  is_active BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Tabla de paradas
CREATE TABLE trip_stops (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  trip_id UUID REFERENCES trips(id) ON DELETE CASCADE,
  stop_order INTEGER NOT NULL,
  name TEXT,
  address TEXT,
  lat DECIMAL(10, 8) NOT NULL,
  lng DECIMAL(11, 8) NOT NULL,
  distance_from_origin DECIMAL(8, 2) NOT NULL,
  radius_km DECIMAL(4, 2) NOT NULL DEFAULT 1.0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Índices para búsquedas rápidas
CREATE INDEX idx_trips_active ON trips(is_active);
CREATE INDEX idx_trips_days ON trips USING GIN(days_of_week);
CREATE INDEX idx_trips_origin_geom ON trips USING GIST(ST_Point(origin_lng, origin_lat));
CREATE INDEX idx_trips_destination_geom ON trips USING GIST(ST_Point(destination_lng, destination_lat));
CREATE INDEX idx_trip_stops_geom ON trip_stops USING GIST(ST_Point(lng, lat));
CREATE INDEX idx_trip_stops_trip_id ON trip_stops(trip_id);

-- Función para buscar viajes por proximidad
CREATE OR REPLACE FUNCTION search_trips_by_location(
  user_lat DECIMAL(10, 8),
  user_lng DECIMAL(11, 8),
  radius_km DECIMAL(4, 2) DEFAULT 1.0,
  day_of_week INTEGER DEFAULT NULL
)
RETURNS TABLE (
  trip_id UUID,
  match_type TEXT,
  match_distance DECIMAL(8, 2),
  stop_id UUID,
  stop_name TEXT,
  stop_address TEXT,
  trip_data JSONB
) AS $$
BEGIN
  RETURN QUERY
  WITH trip_matches AS (
    -- Buscar matches en origen
    SELECT 
      t.id as trip_id,
      'origin'::TEXT as match_type,
      ST_Distance(
        ST_Point(t.origin_lng, t.origin_lat)::geography,
        ST_Point(user_lng, user_lat)::geography
      ) / 1000 as match_distance,
      NULL::UUID as stop_id,
      t.origin_name as stop_name,
      t.origin_name as stop_address,
      to_jsonb(t.*) as trip_data
    FROM trips t
    WHERE t.is_active = true
      AND (day_of_week IS NULL OR day_of_week = ANY(t.days_of_week))
      AND ST_DWithin(
        ST_Point(t.origin_lng, t.origin_lat)::geography,
        ST_Point(user_lng, user_lat)::geography,
        radius_km * 1000
      )
    
    UNION ALL
    
    -- Buscar matches en destino
    SELECT 
      t.id as trip_id,
      'destination'::TEXT as match_type,
      ST_Distance(
        ST_Point(t.destination_lng, t.destination_lat)::geography,
        ST_Point(user_lng, user_lat)::geography
      ) / 1000 as match_distance,
      NULL::UUID as stop_id,
      t.destination_name as stop_name,
      t.destination_name as stop_address,
      to_jsonb(t.*) as trip_data
    FROM trips t
    WHERE t.is_active = true
      AND (day_of_week IS NULL OR day_of_week = ANY(t.days_of_week))
      AND ST_DWithin(
        ST_Point(t.destination_lng, t.destination_lat)::geography,
        ST_Point(user_lng, user_lat)::geography,
        radius_km * 1000
      )
    
    UNION ALL
    
    -- Buscar matches en paradas
    SELECT 
      t.id as trip_id,
      'stop'::TEXT as match_type,
      ST_Distance(
        ST_Point(ts.lng, ts.lat)::geography,
        ST_Point(user_lng, user_lat)::geography
      ) / 1000 as match_distance,
      ts.id as stop_id,
      ts.name as stop_name,
      ts.address as stop_address,
      to_jsonb(t.*) as trip_data
    FROM trips t
    JOIN trip_stops ts ON t.id = ts.trip_id
    WHERE t.is_active = true
      AND (day_of_week IS NULL OR day_of_week = ANY(t.days_of_week))
      AND ST_DWithin(
        ST_Point(ts.lng, ts.lat)::geography,
        ST_Point(user_lng, user_lat)::geography,
        ts.radius_km * 1000
      )
  )
  SELECT * FROM trip_matches
  ORDER BY match_distance ASC;
END;
$$ LANGUAGE plpgsql;
